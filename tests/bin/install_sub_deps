#!/usr/bin/env node
/* Modeled after: https://github.com/newrelic/node-newrelic/blob/master/test/bin/install_sub_deps */
'use strict'

const path = require('path')
const glob = require('glob')
const assert = require('assert')
const exec = require('child_process').exec

const folder = process.argv[2];
const retries = 2

assert(folder, 'Missing folder!');

glob(`**/tests/${folder}/**/package.json`, {}, (err, packages) => {
  if (err) { fail(err); }

  install(packages.filter((line) => !/node_modules|example/.test(line)));
});

const install = (packages, retry)  => {
  if (!retry) retry = 0

  const failed = []
  let counter = 0

  packages.forEach((packageJsonPath) => {
    const packagePath = path.resolve(packageJsonPath).split('/').slice(0, -1).join('/');

    console.log('installing deps in %s', packagePath)
    exec(`cd ${packagePath} && rm -rf node_modules && npm i`, {
      maxBuffer: 1024 * 500
    }, (err, stdout, stderr) => {
      if (err || isErrorOutput(stderr)) {
        printError(packageJsonPath, err || stderr)
        if (retry < retries) {
          failed.push(packageJsonPath)
        }
      }

      if (++counter === packages.length) {
        if (failed.length > 0 && retry < retries) {
          console.log('%s package(s) failed to install, retrying...', failed.length)
          exec('npm cache clean', () => install(failed, ++retry));
        }
      }
    })
  })
}

// determines if stderr contains errors
function isErrorOutput(text) {
  return (text && text.indexOf('npm ERR') > -1)
}

function printError(packagePath, error) {
  console.log('-----------------------------------------------------------')
  console.log(packagePath + ' failed installing with the following error:')
  console.log(error)
  console.log('-----------------------------------------------------------')
}